#lang racket
(require racket/async-channel)

(define (test iAc iBc oAc oBc)
  (thread (lambda ()
            ;; states of A and B arrivals
            (define bcnt 0)
            (define acnt 0)
            (define data "")
            (define (getA)
              (async-channel-try-get iAc))
            (define (getB)
              (async-channel-try-get iBc))
            (define (putA s)
              (async-channel-put oAc s))
            (define (putB s)
              (async-channel-put oBc s))
            (let loop ()
              ;; process for As
              (set! data (getA))
              (cond
                [(async-channel? data)(putA 'a)(putB 'b)])
              (case data
                [(Q) (putA 'q) (void)]
                [(A) 
                 (begin
                   (putA 'a))
                 ;;(set! acnt (add1 acnt))
                     ])
              (cond
                [(>= bcnt 0)])
              ;; process for Bs
              (set! data (getB))
              (case data
                [(Q) (putB 'q) (void)]
                [(B) (begin
                       (putB 'b)
                       (loop))]
                [else (loop)])))))

;; channels to A
(define tsA (make-async-channel))
(define fsA (make-async-channel))
;; channels to B
(define tsB (make-async-channel))
(define fsB (make-async-channel))


(define processA%
  (class object%
  (init ocIn)
  (define oc ocIn)
  (thread (lambda ()
            
            (define ic (make-async-channel))
            ;; TODO return their output channel
            (define get-chan oc)
            (define (get)
              (async-channel-get ic))
            (define (put s)
              (async-channel-put oc s))
            ;; send our input channel to server
            (put ic)
            (define data "")
            (define cnt 0)
            (let loop ()
              (sleep 3)
              (set! data (get))
              (put 'A)
              (case data
                [(q) (printf "Process A stopping.")]
                [(a) (begin
                       (set! cnt (add1 cnt))
                       (printf "Process A proceeds ~a time.\n" cnt)
                       (loop))]))))
    (super-new)))


(define processB%
  (class object%
  (init ocIn)
  (define oc ocIn)
  (thread (lambda ()
            
            (define ic (make-async-channel))
            (define (get)
              (async-channel-get ic))
            (define (put s)
              (async-channel-put oc s))
            ;; send our unique channel to server
            (put ic)
            (define data "")
            (define cnt 0)
            (let loop ()
              (sleep 1)
              (set! data (get))
              (put 'B)
              (case data
                [(q) (printf "Process B stopping.")]
                [(b) (begin
                       (set! cnt (add1 cnt))
                       (printf "Process B proceeds ~a time.\n" cnt)
                       (loop))]))))
    (super-new)))


(test tsA tsB fsA fsB)
(define pA (new processA% [ocIn tsA]))
;;(pA fsA)
(define pB (new processB% [ocIn tsB]))
(define pB2 (new processB% [ocIn tsB]))
;;(pB fsB)
;; start things off
(async-channel-put tsA 'A)
(async-channel-put tsB 'B)

(define (stop)
  (async-channel-put tsA 'Q)
  (async-channel-put tsB 'Q))