#lang racket
(require racket/async-channel)
;; Isaac Powell
;; Written for Geoffrey Matthews' CSCI 322 class
;; A simple server that synchronous two seperate
;; kinds of processes.
;; This is part B.

;; synchronizing server class
(define server%
  (class object%
    ;; channels to and from As and Bs
    ;; to server from A, from server to B, etc.
    ;; server will get from in* and put to out*
    (init tSfA tSfB fStA fStB)
    (define inA tSfA)
    (define inB tSfB)
    (define outA fStA)
    (define outB fStB)
    (define (getA)
      (async-channel-try-get inA))
    (define (getB)
      (async-channel-try-get inB))
    (define (putA s)
      (async-channel-put outA s))
    (define (putB s)
      (async-channel-put outB s))
    
    ;; keep track of waiting As
    ;; and unserviced Bs, data for gets
    ;(define cntA 0)
    ;(define unsB 0)
    (define data "")
    (super-new)
    (define/public (start)
      (thread (lambda ()
                (let loop ()
                  ;; reset data
                  (set! data "")
                  (set! data (getA))
                  (case data
                    [("relB")(putB "metAandB")(putB "metAandB")])
                  (set! data "")
                  (set! data (getB))
                  (case data
                    [("Bhere")(putA "hasB")])
                  (loop)))))))

;; thread A object
(define processA%
  (class object%
    (init inC outC ID)
    (define in inC)
    (define out outC)
    (define id ID)
    (define data "")
    (define cntB 0)
    (define (get)
      (async-channel-get in))
    (define (put s)
      (async-channel-put out s))
    (super-new)
    ;; procedure must be called to start
    ;; main execution loop
    (define/public (start)
      (thread (lambda ()
                (let loopOut ([t 3])
                  (sleep (random 7))
                  (printf "A~a arrives.\n" id)
                  (let loopIn ()
                    (set! data "")
                    (set! data (get))
                    (case data
                      [("hasB")(set! cntB (add1 cntB))])
                    (cond [(>= cntB 2)(set! cntB 0)(put "relB")]
                          [else (loopIn)]))
                  (printf "A~a proceeds.\n" id)
                  (cond [(> t 0)(loopOut (sub1 t))]))
                (printf "A~a finished.\n" id))))))

;; thread B object
(define processB%
  (class object%
    (init inC outC ID)
    (define in inC)
    (define out outC)
    (define id ID)
    (define data "")
    (define (get)
      (async-channel-get in))
    (define (put s)
      (async-channel-put out s))
    (super-new)
    (define/public (start)
      (thread (lambda ()
                (let loopOut ([t 3])
                  (sleep (random 5))
                  (printf "B~a arrives.\n" id)
                  (put "Bhere")
                  (let loopIn ()
                    (set! data "")
                    (set! data (get))
                    (case data
                      [("metAandB")(printf "B~a proceeds.\n" id)]
                      [else (loopIn)]))
                  (cond [(> t 0)(loopOut (sub1 t))]))
                (printf "B~a finished.\n" id))))))

;; channels to/from As
(define tsA (make-async-channel))
(define fsA (make-async-channel))
;; channels to/from Bs
(define tsB (make-async-channel))
(define fsB (make-async-channel))

;; start server thread running
(define our_server (new server% [tSfA tsA][tSfB tsB][fStA fsA][fStB fsB]))
(send our_server start)

(define a1 (new processA% [inC fsA][outC tsA][ID 1]))
(define a2 (new processA% [inC fsA][outC tsA][ID 2]))
(define a3 (new processA% [inC fsA][outC tsA][ID 3]))
(define a4 (new processA% [inC fsA][outC tsA][ID 4]))
(define a5 (new processA% [inC fsA][outC tsA][ID 5]))
(define a6 (new processA% [inC fsA][outC tsA][ID 6]))
(define a7 (new processA% [inC fsA][outC tsA][ID 7]))

(define b1 (new processB% [inC fsB][outC tsB][ID 1]))
(define b2 (new processB% [inC fsB][outC tsB][ID 2]))
(define b3 (new processB% [inC fsB][outC tsB][ID 3]))
(define b4 (new processB% [inC fsB][outC tsB][ID 4]))
(define b5 (new processB% [inC fsB][outC tsB][ID 5]))
(define b6 (new processB% [inC fsB][outC tsB][ID 6]))
(define b7 (new processB% [inC fsB][outC tsB][ID 7]))
(define b8 (new processB% [inC fsB][outC tsB][ID 8]))
(define b9 (new processB% [inC fsB][outC tsB][ID 9]))
(define b10 (new processB% [inC fsB][outC tsB][ID 10]))
(define b11 (new processB% [inC fsB][outC tsB][ID 11]))
(define b12 (new processB% [inC fsB][outC tsB][ID 12]))
(define b13 (new processB% [inC fsB][outC tsB][ID 13]))
(define b14 (new processB% [inC fsB][outC tsB][ID 14]))

(send a1 start)
(send a2 start)
;(send a3 start)
;(send a4 start)
;(send a5 start)
;(send a6 start)
;(send a7 start)

(send b1 start)
(send b2 start)
(send b3 start)
(send b4 start)
;(send b5 start)
;(send b6 start)
;(send b7 start)
;(send b8 start)
;(send b9 start)
;(send b10 start)
;(send b11 start)
;(send b12 start)
;(send b13 start)
;(send b14 start)
